{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "crazxy-modal",
  "type": "registry:component",
  "title": "Crazxy Modal ",
  "description": "A simple crazxy modal component",
  "registryDependencies": [],
  "files": [
    {
      "path": "components/crazxy/modal/modal.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\nimport { X } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst modalVariants = cva(\r\n  \"relative w-full max-w-lg rounded-lg border bg-background p-6 shadow-lg transition-all duration-200\",\r\n  {\r\n    variants: {\r\n      size: {\r\n        default: \"max-w-lg\",\r\n        sm: \"max-w-sm\",\r\n        lg: \"max-w-2xl\",\r\n        xl: \"max-w-4xl\",\r\n        full: \"max-w-[calc(100vw-2rem)]\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      size: \"default\",\r\n    },\r\n  },\r\n);\r\n\r\ninterface ModalProps extends VariantProps<typeof modalVariants> {\r\n  title?: React.ReactNode;\r\n  description?: React.ReactNode;\r\n  children?: React.ReactNode;\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  showCloseButton?: boolean;\r\n  closeOnOutsideClick?: boolean;\r\n  footer?: React.ReactNode;\r\n  className?: string;\r\n  contentClassName?: string;\r\n}\r\n\r\nconst Modal = React.forwardRef<HTMLDivElement, ModalProps>((props, ref) => {\r\n  const {\r\n    title,\r\n    description,\r\n    children,\r\n    isOpen,\r\n    onClose,\r\n    showCloseButton = true,\r\n    closeOnOutsideClick = true,\r\n    footer,\r\n    size,\r\n    className,\r\n    contentClassName,\r\n  } = props;\r\n\r\n  const [isVisible, setIsVisible] = React.useState(false);\r\n  const [isAnimating, setIsAnimating] = React.useState(false);\r\n\r\n  // Handle animation timing\r\n  React.useEffect(() => {\r\n    if (isOpen) {\r\n      setIsVisible(true);\r\n      setIsAnimating(true);\r\n      const timer = setTimeout(() => setIsAnimating(false), 300);\r\n      return () => clearTimeout(timer);\r\n    } else {\r\n      setIsAnimating(true);\r\n      const timer = setTimeout(() => {\r\n        setIsVisible(false);\r\n        setIsAnimating(false);\r\n      }, 300);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [isOpen]);\r\n\r\n  // Close on escape key\r\n  React.useEffect(() => {\r\n    const handleEscape = (e: KeyboardEvent) => {\r\n      if (e.key === \"Escape\" && isOpen) {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", handleEscape);\r\n    return () => document.removeEventListener(\"keydown\", handleEscape);\r\n  }, [isOpen, onClose]);\r\n\r\n  // Prevent body scroll when modal is open\r\n  React.useEffect(() => {\r\n    if (isOpen) {\r\n      document.body.style.overflow = \"hidden\";\r\n    } else {\r\n      document.body.style.overflow = \"\";\r\n    }\r\n    return () => {\r\n      document.body.style.overflow = \"\";\r\n    };\r\n  }, [isOpen]);\r\n\r\n  if (!isVisible && !isOpen) return null;\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"fixed inset-0 z-50 flex items-center justify-center\",\r\n        isOpen ? \"opacity-100\" : \"opacity-0\",\r\n        \"transition-all duration-300 ease-in-out\",\r\n        className,\r\n      )}\r\n      aria-modal={isOpen}\r\n      role=\"dialog\"\r\n    >\r\n      {/* Backdrop with improved animation */}\r\n      <div\r\n        className={cn(\r\n          \"absolute inset-0 bg-background/80 backdrop-blur-sm\",\r\n          isOpen ? \"opacity-100\" : \"opacity-0\",\r\n          \"transition-all duration-300 ease-in-out\",\r\n        )}\r\n        onClick={closeOnOutsideClick && !isAnimating ? onClose : undefined}\r\n      />\r\n\r\n      {/* Modal content with improved animation */}\r\n      <div\r\n        ref={ref}\r\n        className={cn(\r\n          modalVariants({ size }),\r\n          isOpen\r\n            ? \"translate-y-0 scale-100 opacity-100\"\r\n            : \"translate-y-4 scale-95 opacity-0\",\r\n          \"transform-gpu transition-all duration-300 ease-out\",\r\n          contentClassName,\r\n        )}\r\n      >\r\n        {/* Close button */}\r\n        {showCloseButton && (\r\n          <button\r\n            onClick={!isAnimating ? onClose : undefined}\r\n            className=\"absolute cursor-pointer right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none\"\r\n            aria-label=\"Close\"\r\n          >\r\n            <X className=\"h-4 w-4\" />\r\n            <span className=\"sr-only\">Close</span>\r\n          </button>\r\n        )}\r\n\r\n        {/* Title and description */}\r\n        {(title || description) && (\r\n          <div className=\"mb-4\">\r\n            {title && (\r\n              <h3 className=\"text-lg font-semibold leading-none tracking-tight\">\r\n                {title}\r\n              </h3>\r\n            )}\r\n            {description && (\r\n              <p className=\"mt-1 text-sm text-muted-foreground\">\r\n                {description}\r\n              </p>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* Content */}\r\n        <div className=\"py-2\">{children}</div>\r\n\r\n        {/* Footer */}\r\n        {footer && <div className=\"mt-4\">{footer}</div>}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nModal.displayName = \"Modal\";\r\n\r\nexport { Modal };\r\nexport type { ModalProps };\r\n",
      "type": "registry:component",
      "target": "components/ui/crazxy-ui/modal.tsx"
    }
  ]
}